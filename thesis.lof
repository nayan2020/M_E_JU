\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces \textbf {Agentic RAG Framework and Taxonomy.} This figure presents the integration of Retrieval-Augmented Generation (RAG) with agentic planning. The architecture highlights the interaction between the retrieval, augmentation, and generation modules, coordinated by an agentic controller that enables dynamic tool selection, memory utilization, and reflective reasoning for robust information extraction. }}{26}{figure.3.1}%
\contentsline {figure}{\numberline {3.2}{\ignorespaces \textbf {Architecture of the Retrieval-Augmented Generation (RAG) System.} The diagram illustrates the three core components: (1) \emph {Retrieval}, which queries external knowledge sources using dense vector search and transformer-based models; (2) \emph {Augmentation}, which processes and filters retrieved data to maximize contextual relevance; and (3) \emph {Generation}, where the LLM synthesizes responses by integrating retrieved knowledge with its internal representations. This modular pipeline enables dynamic, context-aware information extraction and response generation. }}{26}{figure.3.2}%
\contentsline {figure}{\numberline {3.3}{\ignorespaces \textbf {Naïve RAG Architecture.} This diagram depicts the foundational retrieve-read workflow of Naïve RAG systems. Keyword-based retrieval methods, such as TF-IDF and BM25, are used to extract relevant documents from static datasets. The retrieved content is directly passed to the language model, which integrates this information to generate contextually enhanced responses. While effective for basic information augmentation, this architecture lacks dynamic adaptation and advanced reasoning capabilities found in more modern RAG paradigms. }}{28}{figure.3.3}%
\contentsline {figure}{\numberline {3.4}{\ignorespaces \textbf {Advanced RAG Architecture.} The figure showcases the enhanced workflow of Advanced RAG systems, which leverage dense retrieval models (e.g., Dense Passage Retrieval) and neural ranking to achieve semantic, context-aware document selection. Unlike Naïve RAG, this architecture supports iterative reasoning, multi-hop retrieval, and dynamic integration of retrieved knowledge, resulting in more accurate, coherent, and informative responses for complex information extraction tasks. }}{29}{figure.3.4}%
\contentsline {figure}{\numberline {3.5}{\ignorespaces \textbf {Modular RAG Architecture.} This figure depicts the modular design of Modular RAG systems, where the retrieval and generation pipeline is decomposed into interoperable, reusable modules. The architecture supports hybrid retrieval (combining dense and sparse methods), composable reasoning chains, and plug-and-play integration of external tools or APIs. Such modularity enables rapid adaptation to new domains, fine-grained control over information flow, and transparent debugging and evaluation of individual components, thereby enhancing scalability, maintainability, and extensibility. }}{30}{figure.3.5}%
\contentsline {figure}{\numberline {3.6}{\ignorespaces \textbf {Graph RAG Architecture.} This figure presents the architecture of Graph RAG systems, which integrate graph-based data structures to enable advanced multi-hop reasoning and richer contextual augmentation. By explicitly modeling relationships, entities, and hierarchies within a knowledge graph, Graph RAG systems can traverse complex information pathways, supporting more nuanced and accurate generative outputs. This approach is particularly effective for domains requiring relational understanding, such as scientific literature analysis, biomedical research, and knowledge-intensive question answering. }}{31}{figure.3.6}%
\contentsline {figure}{\numberline {3.7}{\ignorespaces \textbf {Agentic RAG Architecture.} The diagram showcases the Agentic RAG system, where autonomous agents orchestrate the retrieval, augmentation, and generation modules through dynamic decision-making and workflow optimization. Unlike static RAG pipelines, the agentic controller enables iterative refinement, adaptive tool selection, and multi-step reasoning, allowing the system to respond flexibly to complex, real-time, and multi-domain queries. This architecture supports reflective reasoning, memory utilization, and continuous adaptation, making it highly effective for advanced information extraction and tool orchestration scenarios. }}{33}{figure.3.7}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces System Architecture: Agentic RAG Framework and Component Stack. The diagram illustrates the modular flow from user input through RAG retrieval and generation, agentic planning, tool execution, and output integration.}}{40}{figure.4.1}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
